--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL.

--Creating the table
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--After creating the table, I inserted the Spotify Data .csv into the table

--Next, I explored the data using the following SQL to answer different questions. 

--How many times Olivia Rodrigo appears in this chart?
SELECT COUNT(artist_name) AS Chart_app_Oli_Rod FROM BIT_DB.Spotifydata
WHERE artist_name = 'Olivia Rodrigo';

--How many songs are above 90 on popularity?
SELECT COUNT(popularity) AS Songs_over_90 FROM BIT_DB.Spotifydata
WHERE popularity = 90; 

--What is the average danceabiity?
SELECT AVG(danceability) AS AVG_danceability FROM BIT_DB.Spotifydata;

--Which song has the most loudness?
SELECT artist_name, track_name, MAX(loudness) AS top_loudness
FROM BIT_DB.Spotifydata
LIMIT 1;

--Which is the most frequent artist in the table and how many songs it has
SELECT artist_name, COUNT(artist_name) AS num_of_songs 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY
COUNT(artist_name) DESC
LIMIT 1;

--Which are the 3 longest songs and who wrote each one
SELECT artist_name, track_name, duration_ms 
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 3;

--What song has the lowest tempo?
SELECT track_name, MIN(tempo) AS lowest_tempo
FROM BIT_DB.Spotifydata;

--Who are the top 10 artists based on popularity?
SELECT DISTINCT artist_name, popularity 
FROM BIT_DB.Spotifydata
GROUP BY popularity
ORDER BY popularity DESC
LIMIT 10;

--What is the highest key reached and which song/songs has it?
SELECT track_name, key FROM BIT_DB.Spotifydata
WHERE key IN (SELECT MAX(key) FROM BIT_DB.Spotifydata);
